openapi: 3.0.3
info:
  title: Timetable Service API
  version: "1.0.0"
  description: >
    API для управления расписанием в госпиталях, включая создание, обновление и удаление расписаний и назначений.

servers:
  - url: http://localhost:8082/api
    description: Локальный сервер

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Используйте JWT токен для аутентификации. 
        Добавьте в заголовок `Authorization` в формате: `Bearer {token}`

  schemas:
    Timetable:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        hospitalId:
          type: integer
          format: int64
          example: 101
        doctorId:
          type: integer
          format: int64
          example: 202
        from:
          type: string
          format: date-time
          example: "2024-05-01T08:00:00Z"
        to:
          type: string
          format: date-time
          example: "2024-05-01T20:00:00Z"
        room:
          type: string
          example: "101A"
      required:
        - hospitalId
        - doctorId
        - from
        - to
        - room

    Appointment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1001
        timetableId:
          type: integer
          format: int64
          example: 1
        userId:
          type: integer
          format: int64
          example: 301
        time:
          type: string
          format: date-time
          example: "2024-05-01T09:30:00Z"
      required:
        - timetableId
        - userId
        - time

    TimetableInput:
      type: object
      properties:
        hospitalId:
          type: integer
          format: int64
          example: 101
        doctorId:
          type: integer
          format: int64
          example: 202
        from:
          type: string
          format: date-time
          example: "2024-05-01T08:00:00Z"
        to:
          type: string
          format: date-time
          example: "2024-05-01T20:00:00Z"
        room:
          type: string
          example: "101A"
      required:
        - hospitalId
        - doctorId
        - from
        - to
        - room

    TimetableUpdateInput:
      type: object
      properties:
        hospitalId:
          type: integer
          format: int64
          example: 102
        doctorId:
          type: integer
          format: int64
          example: 203
        from:
          type: string
          format: date-time
          example: "2024-05-01T09:00:00Z"
        to:
          type: string
          format: date-time
          example: "2024-05-01T21:00:00Z"
        room:
          type: string
          example: "102B"

    AppointmentInput:
      type: object
      properties:
        time:
          type: string
          format: date-time
          example: "2024-05-01T10:30:00Z"
      required:
        - time

  responses:
    UnauthorizedError:
      description: Неавторизованный доступ
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Authorization token required"

    ForbiddenError:
      description: Доступ запрещён
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Admin privileges required"

    NotFoundError:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Timetable not found"

    ValidationError:
      description: Ошибка валидации данных
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid 'from' parameter"

    InternalServerError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Failed to create timetable"

security:
  - BearerAuth: []

tags:
  - name: Timetable
    description: Управление расписанием
  - name: Appointment
    description: Управление назначениями

paths:
  /Timetable:
    post:
      tags:
        - Timetable
      summary: Создание нового расписания
      description: >
        Создаёт новое расписание для врача в указанной комнате госпиталя.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimetableInput"
      responses:
        "201":
          description: Расписание успешно создано
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []

    put:
      tags:
        - Timetable
      summary: Обновление существующего расписания
      description: >
        Обновляет данные расписания по указанному ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID расписания для обновления
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimetableUpdateInput"
      responses:
        "200":
          description: Расписание успешно обновлено
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []

    delete:
      tags:
        - Timetable
      summary: Удаление расписания по ID
      description: >
        Удаляет расписание по указанному ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID расписания для удаления
      responses:
        "200":
          description: Расписание успешно удалено
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []

  /Timetable/Doctor/{id}:
    get:
      tags:
        - Timetable
      summary: Получение расписаний по ID врача
      description: >
        Возвращает все расписания, связанные с указанным ID врача.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID врача
      responses:
        "200":
          description: Список расписаний
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Timetable"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []

    delete:
      tags:
        - Timetable
      summary: Удаление расписаний по ID врача
      description: >
        Удаляет все расписания, связанные с указанным ID врача.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID врача, расписания которого нужно удалить
      responses:
        "200":
          description: Расписания успешно удалены
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []

  /Timetable/Hospital/{id}:
    get:
      tags:
        - Timetable
      summary: Получение расписаний по ID госпиталя
      description: >
        Возвращает все расписания, связанные с указанным ID госпиталя.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID госпиталя
      responses:
        "200":
          description: Список расписаний
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Timetable"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []

    delete:
      tags:
        - Timetable
      summary: Удаление расписаний по ID госпиталя
      description: >
        Удаляет все расписания, связанные с указанным ID госпиталя.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID госпиталя, расписания которого нужно удалить
      responses:
        "200":
          description: Расписания успешно удалены
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []

  /Timetable/Hospital/{id}/Room/{room}:
    get:
      tags:
        - Timetable
      summary: Получение расписаний по комнате и госпиталю
      description: >
        Возвращает все расписания для указанной комнаты в конкретном госпитале.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID госпиталя
        - name: room
          in: path
          required: true
          schema:
            type: string
          description: Название комнаты
      responses:
        "200":
          description: Список расписаний
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Timetable"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []

  /Timetable/{id}/Appointments:
    get:
      tags:
        - Appointment
      summary: Получение доступных назначений по ID расписания
      description: >
        Возвращает список доступных временных слотов для назначений по указанному ID расписания.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID расписания
      responses:
        "200":
          description: Список доступных слотов
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: date-time
                  example: "2024-05-01T09:30:00Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []

    post:
      tags:
        - Appointment
      summary: Создание нового назначения
      description: >
        Создаёт новое назначение для пользователя по указанному ID расписания.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID расписания
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentInput"
      responses:
        "201":
          description: Назначение успешно создано
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []

  /Appointment/{id}:
    delete:
      tags:
        - Appointment
      summary: Удаление назначения по ID
      description: >
        Удаляет назначение по указанному ID. Доступно только для владельца назначения, администратора или менеджера.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID назначения
      responses:
        "200":
          description: Назначение успешно удалено
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
